generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum UserRole {
    SUPER_ADMIN
    ADMIN
    STUDENT
}

enum AttendanceStatusEnum {
    Absent
    Early
    Late
    Undefined
}

enum CheckOutStatusEnum {
    Leave_Early
    Leave_On_Time
    Undefined
}

model SuperAdmin {
    id        Int      @id @default(autoincrement())
    role      UserRole @default(SUPER_ADMIN)
    username  String
    email     String   @unique
    password  String
    createdAt DateTime @default(now())
    Admin     Admin[]
}

model Admin {
    id                   Int        @id @default(autoincrement())
    role                 UserRole   @default(ADMIN)
    username             String
    email                String     @unique
    password             String
    createBySuperAdmin   SuperAdmin @relation(fields: [createBySuperAdminId], references: [id])
    createBySuperAdminId Int
    createdAt            DateTime   @default(now())
}

// model Admin {
//     id        Int      @id @default(autoincrement())
//     name      String
//     email     String   @unique
//     password  String
//     createdAt DateTime @default(now())
// }

model Users {
    id            String        @id @default(cuid())
    role          UserRole      @default(STUDENT)
    name          String
    faceString    String
    checkIn       String?
    checkOut      String?
    level         String?
    teacher       String?
    fatherName    String?
    fatherNumber  String?
    fatherChatId  String?
    motherName    String?
    motherNumber  String?
    motherChatId  String?
    learningShift String?
    createdAt     DateTime      @default(now())
    attendances   Attendances[]
    historicAtts  HistoricAtt[]
}

model Attendances {
    id          Int      @id @default(autoincrement())
    createdAt   DateTime @default(now())
    date        String?
    level       String?
    time        String?
    temperature String?
    user        Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String
    name        String?
}

model AttendanceRule {
    id          Int     @id @default(autoincrement())
    earlyMinute String?
    lateMinute  String?
    offDutyTime String?
    onDutyTime  String?
}

model HistoricAtt {
    id               Int                   @id @default(autoincrement())
    date             String?
    level            String?
    checkIn          String?
    checkOut         String?
    temperature      String?
    attendanceStatus AttendanceStatusEnum?
    checkOutStatus   CheckOutStatusEnum?
    user             Users                 @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId           String
    name             String?

    @@unique([date, userId])
}

model Location {
    id   Int     @id @default(autoincrement())
    name String?
}

model level {
    id   Int     @id @default(autoincrement())
    name String?
}
